{"version":3,"sources":["Resources/dracula-protocol-logo.webp","Resources/dracula-chan.png","Utils/default-assumptions.ts","Utils/enhance-assumptions.ts","Utils/formatters.ts","Components/DataTable/index.tsx","Components/DataTable/create-data-source.ts","Styling/colors.tsx","Components/PageWindow/index.tsx","Components/Logo/index.tsx","Components/Header/index.tsx","Components/LineChart/CustomTooltip.tsx","Components/LineChart/index.tsx","Components/LineChart/create-data.ts","Components/Charts/index.tsx","Components/InputPercentage/index.tsx","Components/InputCurrency/index.tsx","Constants/index.tsx","Components/AssumptionsForm/index.tsx","Utils/calculate-drc-farming-strategy.ts","Utils/calculate-traditional-farming-strategy.ts","Components/Footer/index.tsx","Containers/App/index.tsx","Utils/calculate-strategies.ts","index.tsx"],"names":["module","exports","daysAmount","ETHStrategyAPY","gasTransactionCost","depositTransactionAmount","rewardClaimTransactionAmount","swapAndStakeTransactionAmount","initialPrincipal","poolAPY","rewardClaimIntervalDays","DRCFee","enhanceAssumptions","assumptions","poolInterestPerDay","BigNumber","dividedBy","toNumber","compoundInterestPerDay","DRCPoolInterestPerDay","multipliedBy","formatCurrency","value","decimals","decimalZeros","Array","map","join","format","numeral","memo","dataSource","result","traditional","traditionalResult","index","drcResult","drc","profitDifference","profit","Math","abs","day","traditionalYieldEarned","yieldEarned","traditionalTotalYieldEarned","totalYieldEarned","traditionalRewardsToClaim","rewardsToClaim","traditionalClaimThisDay","claimThisDay","traditionalCompoundingETH","compoundingETH","traditionalETHInterestEarned","ETHInterestEarned","traditionalETHEarnings","ETHEarnings","traditionalGassCost","gassCost","traditionalTotalGassCost","totalGassCost","traditionalProfit","drcYieldEarned","drcCompoundingETH","drcETHInterestEarned","drcETHEarnings","drcGassCost","drcTotalGassCost","drcProfit","createDataSource","columns","title","dataIndex","key","width","fixed","sorter","a","b","Text","style","fontWeight","color","children","render","scroll","x","y","pagination","defaultPageSize","PageWindow","className","Logo","size","src","logo","alt","height","Title","Typography","Header","align","type","margin","href","target","CustomTooltip","active","payload","label","length","find","dataKey","gutter","span","textAlign","data","createData","ResponsiveContainer","LineChart","Line","stroke","dot","XAxis","minTickGap","position","YAxis","angle","tickFormatter","val","Tooltip","content","props","Legend","verticalAlign","formatter","TabPane","Tabs","Charts","defaultActiveKey","tab","InputPercentage","onChange","allowNegative","otherProps","percentageValue","onValueChange","event","floatValue","undefined","decimal","suffix","customInput","Input","InputCurrency","currencySymbol","prefix","thousandSeparator","Item","Form","AssumptionsForm","onChangeAssumptions","useState","touched","setTouched","xs","sm","labelCol","wrapperCol","onFinish","formAssumptions","onFieldsChange","scrollToFirstError","initialValues","offset","level","name","strong","extra","rules","required","message","min","max","htmlType","disabled","DraculaChan","marginBottom","calculateFirstDayResult","times","plus","minus","calculateResult","previousDayResult","calculateDRCFarmingStrategy","results","i","push","determineClaimThisDay","earnings","calculateTraditionalFarmingStrategy","Footer","role","aria-label","Panel","Collapse","App","defaultAssumptions","setAssumptions","calculateStrategies","header","enhancedAssumptions","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.69eb98b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dracula-protocol-logo.f7740153.webp\";","module.exports = __webpack_public_path__ + \"static/media/dracula-chan.5fa71319.png\";","// Shared\nexport const daysAmount = 365 * 1\nexport const ETHStrategyAPY = 0.08\nexport const gasTransactionCost = 15\nexport const depositTransactionAmount = 2\nexport const rewardClaimTransactionAmount = 1\nexport const swapAndStakeTransactionAmount = 2\n\n// Victims\nexport const initialPrincipal = 10000\nexport const poolAPY = 0.26\nexport const rewardClaimIntervalDays = 30\nexport const DRCFee = 0.15\n","import BigNumber from 'bignumber.js'\nimport { EnhancedAssumptions, InputAssumptions } from './types'\n\nconst DAYS_PER_YEAR = 365\n\nexport function enhanceAssumptions(\n  assumptions: InputAssumptions\n): EnhancedAssumptions {\n  const { ETHStrategyAPY, poolAPY, DRCFee } = assumptions\n\n  const poolInterestPerDay = new BigNumber(poolAPY)\n    .dividedBy(DAYS_PER_YEAR)\n    .toNumber()\n\n  return {\n    ...assumptions,\n    compoundInterestPerDay: new BigNumber(ETHStrategyAPY)\n      .dividedBy(DAYS_PER_YEAR)\n      .toNumber(),\n    poolInterestPerDay,\n    DRCPoolInterestPerDay: new BigNumber(poolInterestPerDay)\n      .multipliedBy(1 - DRCFee)\n      .toNumber(),\n  }\n}\n","import numeral from 'numeral'\n\ninterface FormatCurrencyOptions {\n  decimals?: number\n}\n\nexport function formatCurrency(\n  value: number | string,\n  { decimals = 2 }: FormatCurrencyOptions = {}\n) {\n  const decimalZeros = [...Array(decimals)].map(() => '0').join('')\n  const format = `$0[.]${decimalZeros}a`\n  return numeral(value).format(format)\n}\n","import React, { memo } from 'react'\n\nimport createDataSource from './create-data-source'\nimport { Result } from '../../Utils/types'\n\nimport { formatCurrency } from '../../Utils/formatters'\nimport { Table } from 'antd'\nimport { Text } from 'recharts'\nimport { DRACULA_RED, LIME } from '../../Styling/colors'\n\nconst DEFAULT_WIDTH = 150\n\ninterface Props {\n  result: Result\n}\n\nfunction DataTable({ result }: Props) {\n  const dataSource = createDataSource(result)\n  const columns = [\n    {\n      title: 'Day',\n      dataIndex: 'day',\n      key: 'day',\n      width: 75,\n      fixed: true,\n      sorter: (a: typeof dataSource[0], b: typeof dataSource[0]) =>\n        a.day - b.day,\n    },\n    {\n      key: 'traditional',\n      title: (\n        <Text\n          style={{\n            fontWeight: 'bold',\n            color: LIME,\n          }}\n        >\n          Traditional Farming Strategy\n        </Text>\n      ),\n      children: [\n        {\n          title: 'Yield Earned',\n          dataIndex: 'traditionalYieldEarned',\n          key: 'traditionalYieldEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Total Yield Earned',\n          dataIndex: 'traditionalTotalYieldEarned',\n          key: 'traditionalTotalYieldEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Rewards To Claim',\n          dataIndex: 'traditionalRewardsToClaim',\n          key: 'traditionalRewardsToClaim',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Claim This Day',\n          dataIndex: 'traditionalClaimThisDay',\n          key: 'traditionalClaimThisDay',\n          width: DEFAULT_WIDTH,\n          render: (value: boolean) => (value ? 'Yes' : 'No'),\n        },\n        {\n          title: 'Compounding ETH',\n          dataIndex: 'traditionalCompoundingETH',\n          key: 'traditionalCompoundingETH',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Interest Earned',\n          dataIndex: 'traditionalETHInterestEarned',\n          key: 'traditionalETHInterestEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Earnings',\n          dataIndex: 'traditionalETHEarnings',\n          key: 'traditionalETHEarnings',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'Gass Cost',\n          dataIndex: 'traditionalGassCost',\n          key: 'traditionalGassCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Total Gass Cost',\n          dataIndex: 'traditionalTotalGassCost',\n          key: 'traditionalTotalGassCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Profit',\n          dataIndex: 'traditionalProfit',\n          key: 'traditionalProfit',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n      ],\n    },\n    {\n      key: 'drc',\n      title: (\n        <Text\n          style={{\n            fontWeight: 'bold',\n            color: DRACULA_RED,\n          }}\n        >\n          Dracula Protocol Farming Strategy\n        </Text>\n      ),\n      children: [\n        {\n          title: 'Yield Earned',\n          dataIndex: 'drcYieldEarned',\n          key: 'drcYieldEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Compounding ETH',\n          dataIndex: 'drcCompoundingETH',\n          key: 'drcCompoundingETH',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Interest Earned',\n          dataIndex: 'drcETHInterestEarned',\n          key: 'drcETHInterestEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Earnings',\n          dataIndex: 'drcETHEarnings',\n          key: 'drcETHEarnings',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'Gass Cost',\n          dataIndex: 'drcGassCost',\n          key: 'drcGassCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Total Gass Cost',\n          dataIndex: 'drcTotalGassCost',\n          key: 'drcTotalGassCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Profit',\n          dataIndex: 'drcProfit',\n          key: 'drcProfit',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n      ],\n    },\n    {\n      key: 'comparison',\n      title: (\n        <Text\n          style={{\n            fontWeight: 'bold',\n          }}\n        >\n          Comparison\n        </Text>\n      ),\n      children: [\n        {\n          title: 'Profit Difference',\n          dataIndex: 'profitDifference',\n          key: 'profitDifference',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n      ],\n    },\n  ]\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={dataSource}\n      scroll={{\n        x: '100%',\n        y: 300,\n      }}\n      pagination={{\n        defaultPageSize: 365,\n      }}\n    />\n  )\n}\n\nexport default memo(DataTable)\n","import { Result } from '../../Utils/types'\n\nexport default function createDataSource(result: Result) {\n  return result.traditional.map((traditionalResult, index) => {\n    const drcResult = result.drc[index]\n    const profitDifference =\n      drcResult.profit < traditionalResult.profit\n        ? -1 * Math.abs(traditionalResult.profit - drcResult.profit)\n        : Math.abs(traditionalResult.profit - drcResult.profit)\n    return {\n      day: traditionalResult.day,\n      traditionalYieldEarned: traditionalResult.yieldEarned,\n      traditionalTotalYieldEarned: traditionalResult.totalYieldEarned,\n      traditionalRewardsToClaim: traditionalResult.rewardsToClaim,\n      traditionalClaimThisDay: traditionalResult.claimThisDay,\n      traditionalCompoundingETH: traditionalResult.compoundingETH,\n      traditionalETHInterestEarned: traditionalResult.ETHInterestEarned,\n      traditionalETHEarnings: traditionalResult.ETHEarnings,\n      traditionalGassCost: traditionalResult.gassCost,\n      traditionalTotalGassCost: traditionalResult.totalGassCost,\n      traditionalProfit: traditionalResult.profit,\n      drcYieldEarned: drcResult.yieldEarned,\n      drcCompoundingETH: drcResult.compoundingETH,\n      drcETHInterestEarned: drcResult.ETHInterestEarned,\n      drcETHEarnings: drcResult.ETHEarnings,\n      drcGassCost: drcResult.gassCost,\n      drcTotalGassCost: drcResult.totalGassCost,\n      drcProfit: drcResult.profit,\n      profitDifference,\n    }\n  })\n}\n","export const DRACULA_RED = '#fe5767'\nexport const LIME = '#00FF00'\n","import React from 'react'\n\nimport './index.less'\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport default function PageWindow({ children }: Props) {\n  return <div className=\"page-window\">{children}</div>\n}\n","import React from 'react'\n\nimport logo from '../../Resources/dracula-protocol-logo.webp'\n\ninterface Props {\n  size?: number\n}\n\nexport default function Logo({ size = 50 }: Props) {\n  return (\n    <img\n      src={logo}\n      alt=\"Dracula Protocol Logo\"\n      style={{\n        width: size,\n        height: size,\n      }}\n    />\n  )\n}\n","import { Divider, Button, Typography, Row } from 'antd'\nimport React from 'react'\n\nimport Logo from '../Logo'\nimport './index.less'\n\nconst { Title } = Typography\n\nconst APP_URL = 'https://v2.dracula.sucks/'\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      <Row align=\"middle\">\n        <Logo />\n        <Divider type=\"vertical\" />\n        <Title\n          style={{\n            margin: 0,\n          }}\n        >\n          Dracula Protocol V2 - Calculator\n        </Title>\n      </Row>\n      <Button type=\"primary\" href={APP_URL} target=\"_blank\">\n        Visit App\n      </Button>\n    </div>\n  )\n}\n","import { Col, Row } from 'antd'\nimport React from 'react'\nimport { formatCurrency } from '../../Utils/formatters'\n\ninterface Props {\n  active: boolean\n  label: string\n  payload: any\n}\n\nexport default function CustomTooltip({ active, payload, label }: Props) {\n  if (active && payload && payload.length) {\n    const traditionalProfit = payload.find(\n      ({ dataKey }: { dataKey: string }) => dataKey === 'traditionalProfit'\n    )?.value\n    const drcProfit = payload.find(\n      ({ dataKey }: { dataKey: string }) => dataKey === 'drcProfit'\n    )?.value\n\n    return (\n      <div className=\"line-chart-custom-tooltip\">\n        <Row gutter={[8, 4]}>\n          <Col span={12} style={{ textAlign: 'right' }}>\n            Day:\n          </Col>\n          <Col span={12}>{label}</Col>\n          <Col span={12} style={{ textAlign: 'right' }}>\n            Traditional Profit:\n          </Col>\n          <Col span={12}>{formatCurrency(traditionalProfit)}</Col>\n          <Col span={12} style={{ textAlign: 'right' }}>\n            DRC Profit:\n          </Col>\n          <Col span={12}>{formatCurrency(drcProfit)}</Col>\n        </Row>\n      </div>\n    )\n  }\n\n  return null\n}\n","import React, { memo } from 'react'\nimport {\n  ResponsiveContainer,\n  LineChart as LineChartComponent,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n} from 'recharts'\nimport { DRACULA_RED, LIME } from '../../Styling/colors'\nimport { formatCurrency } from '../../Utils/formatters'\nimport { Result } from '../../Utils/types'\nimport { createData } from './create-data'\nimport CustomTooltip from './CustomTooltip'\n\nimport './index.less'\n\ninterface Props {\n  result: Result\n}\n\nfunction LineChart({ result }: Props) {\n  const data = createData(result)\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={500}>\n      <LineChartComponent className=\"line-chart\" data={data}>\n        <Line\n          dataKey=\"traditionalProfit\"\n          type=\"monotone\"\n          stroke={LIME}\n          dot={false}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"drcProfit\"\n          stroke={DRACULA_RED}\n          dot={false}\n        />\n        <XAxis\n          dataKey=\"day\"\n          height={50}\n          minTickGap={25}\n          label={{\n            value: 'Days',\n            position: 'insideBottom',\n          }}\n        />\n        <YAxis\n          width={100}\n          label={{\n            value: 'Profit',\n            angle: -90,\n            position: 'insideLeft',\n          }}\n          tickFormatter={(val) => formatCurrency(val, { decimals: 2 })}\n        ></YAxis>\n        <Tooltip content={(props: any) => <CustomTooltip {...props} />} />\n        <Legend\n          verticalAlign=\"top\"\n          height={36}\n          formatter={(val) =>\n            val === 'traditionalProfit'\n              ? 'Traditional Farming Profit'\n              : 'Dracula Protocol Profit'\n          }\n        />\n      </LineChartComponent>\n    </ResponsiveContainer>\n  )\n}\n\nexport default memo(LineChart)\n","import { Result } from '../../Utils/types'\n\nexport function createData(result: Result) {\n  return [\n    {\n      day: 0,\n      traditionalProfit: 0,\n      drcProfit: 0,\n    },\n    ...result.traditional.map(({ day, profit }, index) => ({\n      day,\n      traditionalProfit: profit,\n      drcProfit: result.drc[index].profit,\n    })),\n  ]\n}\n","import React from 'react'\nimport { Tabs } from 'antd'\nimport LineChart from '../LineChart'\nimport { Result } from '../../Utils/types'\n\nconst { TabPane } = Tabs\n\ninterface Props {\n  result: Result\n}\n\nexport default function Charts({ result }: Props) {\n  return (\n    <Tabs defaultActiveKey=\"1\">\n      <TabPane tab=\"Line Chart\" key=\"1\">\n        <LineChart result={result} />\n      </TabPane>\n      <TabPane tab=\"Heatmap\" key=\"2\">\n        Coming soon!\n      </TabPane>\n    </Tabs>\n  )\n}\n","import React from 'react'\nimport NumberFormat, { NumberFormatValues } from 'react-number-format'\nimport { Input } from 'antd'\nimport BigNumber from 'bignumber.js'\n\ninterface Props {\n  onChange?: (value: number | null) => void\n  value?: number | null | undefined\n  allowNegative?: boolean\n}\n\nexport default function InputPercentage({\n  onChange,\n  value,\n  allowNegative = true,\n  ...otherProps\n}: Props) {\n  const onValueChange = (event: NumberFormatValues) => {\n    if (!onChange) {\n      return\n    }\n    const { floatValue } = event\n    if (floatValue === undefined) {\n      onChange(null)\n      return\n    }\n    const decimal = new BigNumber(floatValue).dividedBy(100).toNumber()\n    onChange(decimal)\n  }\n\n  const percentageValue =\n    value != null ? new BigNumber(value).multipliedBy(100).toNumber() : ''\n\n  return (\n    <NumberFormat\n      {...otherProps}\n      value={percentageValue}\n      onValueChange={onValueChange}\n      suffix=\"%\"\n      customInput={Input}\n      allowNegative={allowNegative}\n    />\n  )\n}\n","import React from 'react'\nimport NumberFormat, { NumberFormatValues } from 'react-number-format'\nimport { Input } from 'antd'\n\nimport { DEFAULT_CURRENCY_SYMBOL } from '../../Constants'\n\ninterface Props {\n  onChange?: (value: number | null) => void\n  currencySymbol?: string\n  allowNegative?: boolean\n}\n\nexport default function InputCurrency({\n  onChange,\n  currencySymbol = DEFAULT_CURRENCY_SYMBOL,\n  allowNegative = true,\n  ...otherProps\n}: Props) {\n  const onValueChange = (event: NumberFormatValues) => {\n    if (!onChange) {\n      return\n    }\n    const { floatValue } = event\n    onChange(floatValue === undefined ? null : floatValue)\n  }\n\n  return (\n    <NumberFormat\n      {...otherProps}\n      onValueChange={onValueChange}\n      prefix={currencySymbol}\n      customInput={Input}\n      allowNegative={allowNegative}\n      thousandSeparator\n    />\n  )\n}\n","export const DEFAULT_CURRENCY_SYMBOL = '$'\n","import React, { useState } from 'react'\nimport { Form, InputNumber, Typography, Row, Tabs, Col, Button } from 'antd'\nimport Title from 'antd/lib/typography/Title'\nimport { InputAssumptions } from '../../Utils/types'\nimport InputPercentage from '../InputPercentage'\nimport InputCurrency from '../InputCurrency'\nimport DraculaChan from '../../Resources/dracula-chan.png'\n\nconst { Item } = Form\nconst { Text } = Typography\nconst { TabPane } = Tabs\n\ninterface Props {\n  assumptions: InputAssumptions\n  onChangeAssumptions: (assumptions: InputAssumptions) => void\n}\n\nexport default function AssumptionsForm({\n  assumptions,\n  onChangeAssumptions,\n}: Props) {\n  const [touched, setTouched] = useState(false)\n\n  const onFinish = (formAssumptions: InputAssumptions) => {\n    setTouched(false)\n    // Because of the Tabs, not all items are registered: we have to spread the initial assumptions.\n    onChangeAssumptions({\n      ...assumptions,\n      ...formAssumptions,\n    })\n  }\n\n  return (\n    <Row align=\"bottom\">\n      <Col xs={24} sm={16}>\n        <Form\n          labelCol={{ span: 12 }}\n          wrapperCol={{ span: 12 }}\n          onFinish={onFinish}\n          onFieldsChange={() => setTouched(true)}\n          scrollToFirstError\n          initialValues={assumptions}\n        >\n          <Tabs defaultActiveKey=\"1\">\n            <TabPane tab=\"Basic\" key=\"1\">\n              <Row>\n                <Col\n                  xs={24}\n                  sm={{\n                    span: 12,\n                    offset: 12,\n                  }}\n                >\n                  <Title level={3}>Basic Assumptions</Title>\n                </Col>\n              </Row>\n              <Item\n                name=\"initialPrincipal\"\n                label={<Text strong>Initial Principal</Text>}\n                extra=\"The total value of LP tokens in USD.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Initial Principal is required!',\n                  },\n                ]}\n              >\n                <InputCurrency />\n              </Item>\n              <Item\n                name=\"poolAPY\"\n                label={<Text strong>Victim Pool APY</Text>}\n                extra=\"The annual percentage yield of the pool.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Victim Pool APY is required!',\n                  },\n                ]}\n              >\n                <InputPercentage />\n              </Item>\n              <Item\n                name=\"ETHStrategyAPY\"\n                label={<Text strong>Compound Strategy APY</Text>}\n                extra=\"The annual percentage yield of the reward compound strategy.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Compound Strategy APY is required!',\n                  },\n                ]}\n              >\n                <InputPercentage />\n              </Item>\n              <Item\n                name=\"rewardClaimIntervalDays\"\n                label={<Text strong>Reward Claim Interval</Text>}\n                extra=\"Amount of days between reward claims for traditional farming strategy. Set to zero (0) to never claim rewards.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Reward Claim Interval is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                name=\"gasTransactionCost\"\n                label={<Text strong>Gass Transaction Cost</Text>}\n                extra=\"Average cost of a single transaction in USD.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Gass Transaction Cost is required!',\n                  },\n                ]}\n              >\n                <InputCurrency />\n              </Item>\n              <Item\n                name=\"daysAmount\"\n                label={<Text strong>Amount of Days</Text>}\n                extra=\"The timeframe of the analysis in days.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Amount of Days is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} max={365 * 10} style={{ width: '100%' }} />\n              </Item>\n            </TabPane>\n            <TabPane tab=\"Advanced\" key=\"2\">\n              <Row>\n                <Col\n                  xs={24}\n                  sm={{\n                    span: 12,\n                    offset: 12,\n                  }}\n                >\n                  <Title level={3}>Advanced Assumptions</Title>\n                </Col>\n              </Row>\n              <Item\n                label={<Text strong>Deposit Transaction Amount</Text>}\n                required\n                name=\"depositTransactionAmount\"\n                extra=\"The amount of transactions for a deposit of tokens into victim pool or DRC. Considers the approval transaction.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Deposit Transaction Amount is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                label={<Text strong>Reward Claim Transaction Amount</Text>}\n                name=\"rewardClaimTransactionAmount\"\n                extra=\" The amount of transactions for a claim of reward. For reward from victim pool or DRC (ETH/DRC).\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Reward Claim Transaction Amount is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                label={<Text strong>Swap and Stake Transaction Amount</Text>}\n                name=\"swapAndStakeTransactionAmount\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Swap and Stake Transaction Amount is required!',\n                  },\n                ]}\n                extra=\"The amount of transactions for selling the victim token for ETH and deposit into compounding strategy.\"\n              >\n                <InputNumber min={1} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                label={<Text strong>Dracula Protocol Fee</Text>}\n                name=\"DRCFee\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Dracula Protocol Fee is required!',\n                  },\n                ]}\n                extra=\"The protocol performance fee on the yield earned. This is fixed but could be adjusted with community vote.\"\n              >\n                <InputPercentage />\n              </Item>\n            </TabPane>\n          </Tabs>\n          <Item wrapperCol={{ xs: { span: 24 }, sm: { span: 12, offset: 12 } }}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={!touched}>\n              Submit\n            </Button>\n          </Item>\n        </Form>\n      </Col>\n      <Col xs={0} sm={8}>\n        <img\n          src={DraculaChan}\n          alt=\"Dracula Chan\"\n          style={{ marginBottom: -20 }}\n        />\n      </Col>\n    </Row>\n  )\n}\n","import { BigNumber } from 'bignumber.js'\n\nimport { DRCFarmingStrategyResult, EnhancedAssumptions } from './types'\n\nfunction calculateFirstDayResult(\n  assumptions: EnhancedAssumptions\n): DRCFarmingStrategyResult {\n  const {\n    initialPrincipal,\n    DRCPoolInterestPerDay,\n    compoundInterestPerDay,\n    gasTransactionCost,\n    depositTransactionAmount,\n    rewardClaimTransactionAmount,\n  } = assumptions\n\n  const day = 1\n\n  const yieldEarned = new BigNumber(DRCPoolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const compoundingETH = yieldEarned\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gassCost = new BigNumber(gasTransactionCost)\n    .times(\n      depositTransactionAmount +\n        depositTransactionAmount +\n        rewardClaimTransactionAmount\n    )\n    .toNumber()\n\n  const totalGassCost = gassCost\n\n  const profit = new BigNumber(ETHEarnings).minus(totalGassCost).toNumber()\n\n  return {\n    day,\n    yieldEarned,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gassCost,\n    totalGassCost,\n    profit,\n  }\n}\n\nexport function calculateResult(\n  assumptions: EnhancedAssumptions,\n  previousDayResult: DRCFarmingStrategyResult\n): DRCFarmingStrategyResult {\n  const { initialPrincipal, DRCPoolInterestPerDay, compoundInterestPerDay } =\n    assumptions\n\n  const day = previousDayResult.day + 1\n\n  const yieldEarned = new BigNumber(DRCPoolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const compoundingETH = new BigNumber(yieldEarned)\n    .plus(previousDayResult.ETHEarnings)\n    .toNumber()\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gassCost = 0\n\n  const totalGassCost = new BigNumber(previousDayResult.totalGassCost)\n    .plus(gassCost)\n    .toNumber()\n\n  const profit = new BigNumber(ETHEarnings).minus(totalGassCost).toNumber()\n\n  return {\n    day,\n    yieldEarned,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gassCost,\n    totalGassCost,\n    profit,\n  }\n}\n\nexport function calculateDRCFarmingStrategy(assumptions: EnhancedAssumptions) {\n  const results: DRCFarmingStrategyResult[] = []\n\n  for (let i = 0; i < assumptions.daysAmount; i++) {\n    const day = i + 1\n    const result =\n      day === 1\n        ? calculateFirstDayResult(assumptions)\n        : calculateResult(assumptions, results[i - 1])\n\n    results.push(result)\n  }\n\n  return results\n}\n","import { BigNumber } from 'bignumber.js'\n\nimport { EnhancedAssumptions, TraditionalFarmingStrategyResult } from './types'\n\nfunction determineClaimThisDay(day: number, rewardClaimIntervalDays: number) {\n  return rewardClaimIntervalDays > 0 && day % rewardClaimIntervalDays === 0\n}\n\nfunction calculateFirstDayResult(\n  assumptions: EnhancedAssumptions\n): TraditionalFarmingStrategyResult {\n  const {\n    initialPrincipal,\n    poolInterestPerDay,\n    rewardClaimIntervalDays,\n    compoundInterestPerDay,\n    gasTransactionCost,\n    depositTransactionAmount,\n    rewardClaimTransactionAmount,\n    swapAndStakeTransactionAmount,\n  } = assumptions\n\n  const day = 1\n\n  const yieldEarned = new BigNumber(poolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const claimThisDay = determineClaimThisDay(day, rewardClaimIntervalDays)\n\n  const compoundingETH = claimThisDay ? yieldEarned : 0\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gassCost = claimThisDay\n    ? new BigNumber(gasTransactionCost)\n        .times(\n          depositTransactionAmount +\n            rewardClaimTransactionAmount +\n            rewardClaimTransactionAmount +\n            swapAndStakeTransactionAmount\n        )\n        .toNumber()\n    : new BigNumber(gasTransactionCost)\n        .times(depositTransactionAmount + rewardClaimTransactionAmount)\n        .toNumber()\n\n  return {\n    day,\n    yieldEarned: yieldEarned,\n    totalYieldEarned: yieldEarned,\n    rewardsToClaim: yieldEarned,\n    claimThisDay,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gassCost,\n    totalGassCost: gassCost,\n    profit: (claimThisDay ? ETHEarnings : yieldEarned) - gassCost,\n  }\n}\n\nexport function calculateResult(\n  assumptions: EnhancedAssumptions,\n  previousDayResult: TraditionalFarmingStrategyResult\n): TraditionalFarmingStrategyResult {\n  const {\n    initialPrincipal,\n    poolInterestPerDay,\n    rewardClaimIntervalDays,\n    compoundInterestPerDay,\n    gasTransactionCost,\n    rewardClaimTransactionAmount,\n    swapAndStakeTransactionAmount,\n  } = assumptions\n\n  const day = previousDayResult.day + 1\n\n  const yieldEarned = new BigNumber(poolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const totalYieldEarned = new BigNumber(previousDayResult.totalYieldEarned)\n    .plus(yieldEarned)\n    .toNumber()\n\n  const rewardsToClaim = previousDayResult.claimThisDay\n    ? yieldEarned\n    : new BigNumber(yieldEarned)\n        .plus(previousDayResult.rewardsToClaim)\n        .toNumber()\n\n  const claimThisDay = determineClaimThisDay(day, rewardClaimIntervalDays)\n\n  const compoundingETH = claimThisDay\n    ? new BigNumber(rewardsToClaim)\n        .plus(previousDayResult.ETHEarnings)\n        .toNumber()\n    : previousDayResult.ETHEarnings\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gassCost = claimThisDay\n    ? new BigNumber(gasTransactionCost)\n        .times(rewardClaimTransactionAmount + swapAndStakeTransactionAmount)\n        .toNumber()\n    : 0\n\n  const totalGassCost = gassCost + previousDayResult.totalGassCost\n\n  const earnings = claimThisDay\n    ? ETHEarnings\n    : new BigNumber(rewardsToClaim).plus(ETHEarnings).toNumber()\n\n  const profit = new BigNumber(earnings).minus(totalGassCost).toNumber()\n\n  return {\n    day,\n    yieldEarned,\n    totalYieldEarned,\n    rewardsToClaim,\n    claimThisDay,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gassCost,\n    totalGassCost,\n    profit,\n  }\n}\n\nexport function calculateTraditionalFarmingStrategy(\n  assumptions: EnhancedAssumptions\n) {\n  const results: TraditionalFarmingStrategyResult[] = []\n\n  for (let i = 0; i < assumptions.daysAmount; i++) {\n    const day = i + 1\n    const result =\n      day === 1\n        ? calculateFirstDayResult(assumptions)\n        : calculateResult(assumptions, results[i - 1])\n\n    results.push(result)\n  }\n\n  return results\n}\n","import { Typography } from 'antd'\nimport React from 'react'\n\nimport './index.less'\n\nconst { Text } = Typography\n\nexport default function Footer() {\n  return (\n    <footer>\n      <Text type=\"warning\">\n        <span role=\"img\" aria-label=\"bat\">\n          🦇\n        </span>{' '}\n        This is a community contribution. Use at your own discretion!{' '}\n        <span role=\"img\" aria-label=\"bat\">\n          🦇\n        </span>\n      </Text>\n    </footer>\n  )\n}\n","import React, { useState } from 'react'\nimport { Collapse, Divider } from 'antd'\n\nimport * as defaultAssumptions from '../../Utils/default-assumptions'\nimport { enhanceAssumptions } from '../../Utils/enhance-assumptions'\nimport DataTable from '../../Components/DataTable'\nimport PageWindow from '../../Components/PageWindow'\nimport Header from '../../Components/Header'\nimport Charts from '../../Components/Charts'\nimport AssumptionsForm from '../../Components/AssumptionsForm'\nimport { InputAssumptions } from '../../Utils/types'\nimport calculateStrategies from '../../Utils/calculate-strategies'\nimport Footer from '../../Components/Footer'\n\nconst { Panel } = Collapse\n\nfunction App() {\n  const [assumptions, setAssumptions] = useState(\n    enhanceAssumptions(defaultAssumptions)\n  )\n\n  const onChangeAssumptions = (formAssumptions: InputAssumptions) => {\n    const enhancedAssumptions = enhanceAssumptions(formAssumptions)\n    setAssumptions(enhancedAssumptions)\n  }\n  const result = calculateStrategies(assumptions)\n\n  return (\n    <PageWindow>\n      <Header />\n\n      <Charts result={result} />\n\n      <Divider />\n\n      <Collapse defaultActiveKey={['1']}>\n        <Panel header=\"Assumptions\" key=\"1\">\n          <AssumptionsForm\n            assumptions={assumptions}\n            onChangeAssumptions={onChangeAssumptions}\n          />\n        </Panel>\n        <Panel header=\"Data\" key=\"2\">\n          <DataTable result={result} />\n        </Panel>\n      </Collapse>\n\n      <Footer />\n    </PageWindow>\n  )\n}\n\nexport default App\n","import { calculateDRCFarmingStrategy } from './calculate-drc-farming-strategy'\nimport { calculateTraditionalFarmingStrategy } from './calculate-traditional-farming-strategy'\nimport { EnhancedAssumptions, Result } from './types'\n\nexport default function calculateStrategies(\n  assumptions: EnhancedAssumptions\n): Result {\n  return {\n    traditional: calculateTraditionalFarmingStrategy(assumptions),\n    drc: calculateDRCFarmingStrategy(assumptions),\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'antd/dist/antd.less'\nimport 'antd/dist/antd.dark.less'\nimport './index.css'\n\nimport App from './Containers/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}