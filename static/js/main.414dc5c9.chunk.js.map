{"version":3,"sources":["Resources/dracula-protocol-logo.webp","Resources/draccie-drinking.png","Resources/draccie-grinning.png","Utils/default-assumptions.ts","Utils/enhance-assumptions.ts","Utils/calculate-profit-difference.ts","Utils/formatters.ts","Components/DataTable/index.tsx","Components/DataTable/create-data-source.ts","Styling/colors.tsx","Components/PageWindow/index.tsx","Components/Logo/index.tsx","Components/Header/index.tsx","Components/LineChart/CustomTooltip.tsx","Components/LineChart/index.tsx","Components/LineChart/create-data.ts","Components/Heatmap/config.ts","Utils/calculate-drc-farming-strategy.ts","Utils/calculate-traditional-farming-strategy.ts","Utils/calculate-strategies.ts","Components/Heatmap/create-series.ts","Components/Heatmap/create-options.ts","Components/Heatmap/format-tooltip.ts","Components/Heatmap/index.tsx","Components/Charts/index.tsx","Components/InputPercentage/index.tsx","Components/InputCurrency/index.tsx","Constants/index.tsx","Components/AssumptionsForm/index.tsx","Components/Footer/index.tsx","Components/Considerations/index.tsx","Containers/App/index.tsx","index.tsx"],"names":["module","exports","daysAmount","ETHStrategyAPY","gasTransactionCost","depositTransactionAmount","rewardClaimTransactionAmount","swapAndStakeTransactionAmount","initialPrincipal","poolAPY","rewardClaimIntervalDays","DRCFee","enhanceAssumptions","assumptions","poolInterestPerDay","BigNumber","dividedBy","toNumber","compoundInterestPerDay","DRCPoolInterestPerDay","multipliedBy","calculateProfitDifference","traditionalDailyResult","drcDailyResult","profit","Math","abs","formatCurrency","value","decimals","decimalZeros","Array","map","join","format","numeral","memo","dataSource","result","traditional","traditionalResult","index","drcResult","drc","profitDifference","day","traditionalYieldEarned","yieldEarned","traditionalTotalYieldEarned","totalYieldEarned","traditionalRewardsToClaim","rewardsToClaim","traditionalClaimThisDay","claimThisDay","traditionalCompoundingETH","compoundingETH","traditionalETHInterestEarned","ETHInterestEarned","traditionalETHEarnings","ETHEarnings","traditionalGasCost","gasCost","traditionalTotalGasCost","totalGasCost","traditionalProfit","drcYieldEarned","drcCompoundingETH","drcETHInterestEarned","drcETHEarnings","drcGasCost","drcTotalGasCost","drcProfit","createDataSource","columns","title","dataIndex","key","width","fixed","sorter","a","b","Text","style","fontWeight","color","children","render","scroll","x","y","pagination","defaultPageSize","PageWindow","className","Logo","size","src","logo","alt","height","Title","Typography","Header","align","type","margin","href","target","CustomTooltip","active","payload","label","length","find","dataKey","gutter","span","textAlign","data","createData","ResponsiveContainer","LineChart","Line","stroke","dot","XAxis","minTickGap","position","YAxis","angle","tickFormatter","val","Tooltip","content","props","Legend","verticalAlign","formatter","DAYS_AMOUNT","REWARD_CLAIM_INTERVALS","calculateFirstDayResult","times","plus","minus","calculateResult","previousDayResult","calculateDRCFarmingStrategy","results","i","push","determineClaimThisDay","earnings","calculateTraditionalFarmingStrategy","calculateStrategies","modifyAssumptions","buildModifyAssumptions","forEach","rewardClaimIntervalConfig","strategyResults","daysAmountConfig","dailyResultTraditional","dailyResultDRC","custom","profitTraditional","profitDRC","calculateAttributes","createSeries","name","borderWidth","dataLabels","this","point","enabled","xAxisCategories","yAxisCategories","createOptions","chart","plotBorderWidth","text","xAxis","categories","yAxis","legend","tooltip","rewardClaimConfig","formatTooltip","series","window","Highcharts","HighchartsHeatmap","options","highcharts","TabPane","Tabs","Charts","defaultActiveKey","tab","InputPercentage","onChange","allowNegative","otherProps","percentageValue","onValueChange","event","floatValue","undefined","decimal","suffix","customInput","Input","InputCurrency","currencySymbol","prefix","thousandSeparator","Item","Form","AssumptionsForm","onChangeAssumptions","useState","touched","setTouched","xs","sm","labelCol","wrapperCol","onFinish","formAssumptions","onFieldsChange","scrollToFirstError","initialValues","offset","level","strong","extra","rules","required","message","min","max","htmlType","disabled","Draccie","marginBottom","opacity","Footer","role","aria-label","Considerations","float","Panel","Collapse","App","defaultAssumptions","setAssumptions","header","enhancedAssumptions","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.414dc5c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dracula-protocol-logo.f7740153.webp\";","module.exports = __webpack_public_path__ + \"static/media/draccie-drinking.5fa71319.png\";","module.exports = __webpack_public_path__ + \"static/media/draccie-grinning.a6b5abef.png\";","// Shared\nexport const daysAmount = 365 * 1\nexport const ETHStrategyAPY = 0.08\nexport const gasTransactionCost = 15\nexport const depositTransactionAmount = 2\nexport const rewardClaimTransactionAmount = 1\nexport const swapAndStakeTransactionAmount = 2\n\n// Victims\nexport const initialPrincipal = 10000\nexport const poolAPY = 0.26\nexport const rewardClaimIntervalDays = 30\nexport const DRCFee = 0.15\n","import BigNumber from 'bignumber.js'\nimport { EnhancedAssumptions, InputAssumptions } from './types'\n\nconst DAYS_PER_YEAR = 365\n\nexport function enhanceAssumptions(\n  assumptions: InputAssumptions\n): EnhancedAssumptions {\n  const { ETHStrategyAPY, poolAPY, DRCFee } = assumptions\n\n  const poolInterestPerDay = new BigNumber(poolAPY)\n    .dividedBy(DAYS_PER_YEAR)\n    .toNumber()\n\n  return {\n    ...assumptions,\n    compoundInterestPerDay: new BigNumber(ETHStrategyAPY)\n      .dividedBy(DAYS_PER_YEAR)\n      .toNumber(),\n    poolInterestPerDay,\n    DRCPoolInterestPerDay: new BigNumber(poolInterestPerDay)\n      .multipliedBy(1 - DRCFee)\n      .toNumber(),\n  }\n}\n","import {\n  DRCFarmingStrategyResult,\n  TraditionalFarmingStrategyResult,\n} from './types'\n\nexport function calculateProfitDifference(\n  traditionalDailyResult: TraditionalFarmingStrategyResult,\n  drcDailyResult: DRCFarmingStrategyResult\n) {\n  return drcDailyResult.profit < traditionalDailyResult.profit\n    ? -1 * Math.abs(traditionalDailyResult.profit - drcDailyResult.profit)\n    : Math.abs(traditionalDailyResult.profit - drcDailyResult.profit)\n}\n","import numeral from 'numeral'\n\ninterface FormatCurrencyOptions {\n  decimals?: number\n}\n\nexport function formatCurrency(\n  value: number | string,\n  { decimals = 2 }: FormatCurrencyOptions = {}\n) {\n  const decimalZeros = [...Array(decimals)].map(() => '0').join('')\n  const format = `$0[.]${decimalZeros}a`\n  return numeral(value).format(format)\n}\n","import React, { memo } from 'react'\n\nimport createDataSource from './create-data-source'\nimport { Result } from '../../Utils/types'\n\nimport { formatCurrency } from '../../Utils/formatters'\nimport { Table } from 'antd'\nimport { Text } from 'recharts'\nimport { DRACULA_RED, LIME } from '../../Styling/colors'\n\nconst DEFAULT_WIDTH = 150\n\ninterface Props {\n  result: Result\n}\n\nfunction DataTable({ result }: Props) {\n  const dataSource = createDataSource(result)\n  const columns = [\n    {\n      title: 'Day',\n      dataIndex: 'day',\n      key: 'day',\n      width: 75,\n      fixed: true,\n      sorter: (a: typeof dataSource[0], b: typeof dataSource[0]) =>\n        a.day - b.day,\n    },\n    {\n      key: 'traditional',\n      title: (\n        <Text\n          style={{\n            fontWeight: 'bold',\n            color: LIME,\n          }}\n        >\n          Traditional Farming Strategy\n        </Text>\n      ),\n      children: [\n        {\n          title: 'Yield Earned',\n          dataIndex: 'traditionalYieldEarned',\n          key: 'traditionalYieldEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Total Yield Earned',\n          dataIndex: 'traditionalTotalYieldEarned',\n          key: 'traditionalTotalYieldEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Rewards To Claim',\n          dataIndex: 'traditionalRewardsToClaim',\n          key: 'traditionalRewardsToClaim',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Claim This Day',\n          dataIndex: 'traditionalClaimThisDay',\n          key: 'traditionalClaimThisDay',\n          width: DEFAULT_WIDTH,\n          render: (value: boolean) => (value ? 'Yes' : 'No'),\n        },\n        {\n          title: 'Compounding ETH',\n          dataIndex: 'traditionalCompoundingETH',\n          key: 'traditionalCompoundingETH',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Interest Earned',\n          dataIndex: 'traditionalETHInterestEarned',\n          key: 'traditionalETHInterestEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Earnings',\n          dataIndex: 'traditionalETHEarnings',\n          key: 'traditionalETHEarnings',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'Gas Cost',\n          dataIndex: 'traditionalGasCost',\n          key: 'traditionalGasCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Total Gas Cost',\n          dataIndex: 'traditionalTotalGasCost',\n          key: 'traditionalTotalGasCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Profit',\n          dataIndex: 'traditionalProfit',\n          key: 'traditionalProfit',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n      ],\n    },\n    {\n      key: 'drc',\n      title: (\n        <Text\n          style={{\n            fontWeight: 'bold',\n            color: DRACULA_RED,\n          }}\n        >\n          Dracula Protocol Farming Strategy\n        </Text>\n      ),\n      children: [\n        {\n          title: 'Yield Earned',\n          dataIndex: 'drcYieldEarned',\n          key: 'drcYieldEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Compounding ETH',\n          dataIndex: 'drcCompoundingETH',\n          key: 'drcCompoundingETH',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Interest Earned',\n          dataIndex: 'drcETHInterestEarned',\n          key: 'drcETHInterestEarned',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'ETH Earnings',\n          dataIndex: 'drcETHEarnings',\n          key: 'drcETHEarnings',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value, { decimals: 4 }),\n        },\n        {\n          title: 'Gas Cost',\n          dataIndex: 'drcGasCost',\n          key: 'drcGasCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Total Gas Cost',\n          dataIndex: 'drcTotalGasCost',\n          key: 'drcTotalGasCost',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n        {\n          title: 'Profit',\n          dataIndex: 'drcProfit',\n          key: 'drcProfit',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n      ],\n    },\n    {\n      key: 'comparison',\n      title: (\n        <Text\n          style={{\n            fontWeight: 'bold',\n          }}\n        >\n          Comparison\n        </Text>\n      ),\n      children: [\n        {\n          title: 'Profit Difference',\n          dataIndex: 'profitDifference',\n          key: 'profitDifference',\n          width: DEFAULT_WIDTH,\n          render: (value: string) => formatCurrency(value),\n        },\n      ],\n    },\n  ]\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={dataSource}\n      scroll={{\n        x: '100%',\n        y: 300,\n      }}\n      pagination={{\n        defaultPageSize: 365,\n      }}\n    />\n  )\n}\n\nexport default memo(DataTable)\n","import { calculateProfitDifference } from '../../Utils/calculate-profit-difference'\nimport { Result } from '../../Utils/types'\n\nexport default function createDataSource(result: Result) {\n  return result.traditional.map((traditionalResult, index) => {\n    const drcResult = result.drc[index]\n    const profitDifference = calculateProfitDifference(\n      traditionalResult,\n      drcResult\n    )\n    return {\n      day: traditionalResult.day,\n      traditionalYieldEarned: traditionalResult.yieldEarned,\n      traditionalTotalYieldEarned: traditionalResult.totalYieldEarned,\n      traditionalRewardsToClaim: traditionalResult.rewardsToClaim,\n      traditionalClaimThisDay: traditionalResult.claimThisDay,\n      traditionalCompoundingETH: traditionalResult.compoundingETH,\n      traditionalETHInterestEarned: traditionalResult.ETHInterestEarned,\n      traditionalETHEarnings: traditionalResult.ETHEarnings,\n      traditionalGasCost: traditionalResult.gasCost,\n      traditionalTotalGasCost: traditionalResult.totalGasCost,\n      traditionalProfit: traditionalResult.profit,\n      drcYieldEarned: drcResult.yieldEarned,\n      drcCompoundingETH: drcResult.compoundingETH,\n      drcETHInterestEarned: drcResult.ETHInterestEarned,\n      drcETHEarnings: drcResult.ETHEarnings,\n      drcGasCost: drcResult.gasCost,\n      drcTotalGasCost: drcResult.totalGasCost,\n      drcProfit: drcResult.profit,\n      profitDifference,\n    }\n  })\n}\n","export const DRACULA_RED = '#fe5767'\nexport const LIME = '#00FF00'\n","import React from 'react'\n\nimport './index.less'\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport default function PageWindow({ children }: Props) {\n  return <div className=\"page-window\">{children}</div>\n}\n","import React from 'react'\n\nimport logo from '../../Resources/dracula-protocol-logo.webp'\n\ninterface Props {\n  size?: number\n}\n\nexport default function Logo({ size = 50 }: Props) {\n  return (\n    <img\n      src={logo}\n      alt=\"Dracula Protocol Logo\"\n      style={{\n        width: size,\n        height: size,\n      }}\n    />\n  )\n}\n","import { Divider, Button, Typography, Row } from 'antd'\nimport React from 'react'\n\nimport Logo from '../Logo'\nimport './index.less'\n\nconst { Title } = Typography\n\nconst APP_URL = 'https://v2.dracula.sucks/'\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      <Row align=\"middle\">\n        <Logo />\n        <Divider type=\"vertical\" />\n        <Title\n          style={{\n            margin: 0,\n          }}\n        >\n          Dracula Protocol V2 - Calculator\n        </Title>\n      </Row>\n      <Button type=\"primary\" href={APP_URL} target=\"_blank\">\n        Visit App\n      </Button>\n    </div>\n  )\n}\n","import { Col, Row } from 'antd'\nimport React from 'react'\nimport { formatCurrency } from '../../Utils/formatters'\n\ninterface Props {\n  active: boolean\n  label: string\n  payload: any\n}\n\nexport default function CustomTooltip({ active, payload, label }: Props) {\n  if (active && payload && payload.length) {\n    const traditionalProfit = payload.find(\n      ({ dataKey }: { dataKey: string }) => dataKey === 'traditionalProfit'\n    )?.value\n    const drcProfit = payload.find(\n      ({ dataKey }: { dataKey: string }) => dataKey === 'drcProfit'\n    )?.value\n\n    return (\n      <div className=\"line-chart-custom-tooltip\">\n        <Row gutter={[8, 4]}>\n          <Col span={12} style={{ textAlign: 'right' }}>\n            Day:\n          </Col>\n          <Col span={12}>{label}</Col>\n          <Col span={12} style={{ textAlign: 'right' }}>\n            Traditional Profit:\n          </Col>\n          <Col span={12}>{formatCurrency(traditionalProfit)}</Col>\n          <Col span={12} style={{ textAlign: 'right' }}>\n            DRC Profit:\n          </Col>\n          <Col span={12}>{formatCurrency(drcProfit)}</Col>\n        </Row>\n      </div>\n    )\n  }\n\n  return null\n}\n","import React, { memo } from 'react'\nimport {\n  ResponsiveContainer,\n  LineChart as LineChartComponent,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n} from 'recharts'\nimport { DRACULA_RED, LIME } from '../../Styling/colors'\nimport { formatCurrency } from '../../Utils/formatters'\nimport { Result } from '../../Utils/types'\nimport { createData } from './create-data'\nimport CustomTooltip from './CustomTooltip'\n\nimport './index.less'\n\ninterface Props {\n  result: Result\n}\n\nfunction LineChart({ result }: Props) {\n  const data = createData(result)\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={500}>\n      <LineChartComponent className=\"line-chart\" data={data}>\n        <Line\n          dataKey=\"traditionalProfit\"\n          type=\"monotone\"\n          stroke={LIME}\n          dot={false}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"drcProfit\"\n          stroke={DRACULA_RED}\n          dot={false}\n        />\n        <XAxis\n          dataKey=\"day\"\n          height={50}\n          minTickGap={25}\n          label={{\n            value: 'Farming Duration in Days',\n            position: 'insideBottom',\n          }}\n        />\n        <YAxis\n          width={100}\n          label={{\n            value: 'Profit',\n            angle: -90,\n            position: 'insideLeft',\n          }}\n          tickFormatter={(val) => formatCurrency(val, { decimals: 2 })}\n        ></YAxis>\n        <Tooltip content={(props: any) => <CustomTooltip {...props} />} />\n        <Legend\n          verticalAlign=\"top\"\n          height={36}\n          formatter={(val) =>\n            val === 'traditionalProfit'\n              ? 'Traditional Farming Profit'\n              : 'Dracula Protocol Profit'\n          }\n        />\n      </LineChartComponent>\n    </ResponsiveContainer>\n  )\n}\n\nexport default memo(LineChart)\n","import { Result } from '../../Utils/types'\n\nexport function createData(result: Result) {\n  return [\n    {\n      day: 0,\n      traditionalProfit: 0,\n      drcProfit: 0,\n    },\n    ...result.traditional.map(({ day, profit }, index) => ({\n      day,\n      traditionalProfit: profit,\n      drcProfit: result.drc[index].profit,\n    })),\n  ]\n}\n","export const MIN_COLOR = 'darkred'\nexport const MAX_COLOR = 'darkgreen'\n\nexport const DAYS_AMOUNT = [\n  {\n    value: 1,\n    label: '1 day',\n  },\n  {\n    value: 3,\n    label: '3 days',\n  },\n  {\n    value: 7,\n    label: '1 week',\n  },\n  {\n    value: 14,\n    label: '2 weeks',\n  },\n  {\n    value: 30,\n    label: '1 month',\n  },\n  {\n    value: 60,\n    label: '2 months',\n  },\n  {\n    value: 90,\n    label: '1 quarter',\n  },\n  {\n    value: 180,\n    label: '2 quarters',\n  },\n  {\n    value: 365,\n    label: '1 year',\n  },\n  {\n    value: 365 * 2,\n    label: '2 years',\n  },\n  {\n    value: 365 * 3,\n    label: '3 years',\n  },\n  {\n    value: 365 * 4,\n    label: '4 years',\n  },\n  {\n    value: 365 * 5,\n    label: '5 years',\n  },\n]\n\nexport const REWARD_CLAIM_INTERVALS = [\n  {\n    value: 1,\n    label: 'Daily (1)',\n  },\n  {\n    value: 2,\n    label: 'Alternate Days (2)',\n  },\n  {\n    value: 7,\n    label: 'Weekly (7)',\n  },\n  {\n    value: 14,\n    label: 'Alternate Weeks (14)',\n  },\n  {\n    value: 30,\n    label: 'Monthly (30)',\n  },\n  {\n    value: 60,\n    label: 'Alternate Months (60)',\n  },\n  {\n    value: 90,\n    label: 'Quarterly (90)',\n  },\n  {\n    value: 180,\n    label: 'Alternate Quarters (180)',\n  },\n  {\n    value: 365,\n    label: 'Yearly (365)',\n  },\n  {\n    value: 730,\n    label: 'Alternate Years (730)',\n  },\n  {\n    value: 0,\n    label: 'Never',\n  },\n]\n","import { BigNumber } from 'bignumber.js'\n\nimport { DRCFarmingStrategyResult, EnhancedAssumptions } from './types'\n\nfunction calculateFirstDayResult(\n  assumptions: EnhancedAssumptions\n): DRCFarmingStrategyResult {\n  const {\n    initialPrincipal,\n    DRCPoolInterestPerDay,\n    compoundInterestPerDay,\n    gasTransactionCost,\n    depositTransactionAmount,\n    rewardClaimTransactionAmount,\n  } = assumptions\n\n  const day = 1\n\n  const yieldEarned = new BigNumber(DRCPoolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const compoundingETH = yieldEarned\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gasCost = new BigNumber(gasTransactionCost)\n    .times(\n      depositTransactionAmount +\n        depositTransactionAmount +\n        rewardClaimTransactionAmount\n    )\n    .toNumber()\n\n  const totalGasCost = gasCost\n\n  const profit = new BigNumber(ETHEarnings).minus(totalGasCost).toNumber()\n\n  return {\n    day,\n    yieldEarned,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gasCost,\n    totalGasCost,\n    profit,\n  }\n}\n\nexport function calculateResult(\n  assumptions: EnhancedAssumptions,\n  previousDayResult: DRCFarmingStrategyResult\n): DRCFarmingStrategyResult {\n  const { initialPrincipal, DRCPoolInterestPerDay, compoundInterestPerDay } =\n    assumptions\n\n  const day = previousDayResult.day + 1\n\n  const yieldEarned = new BigNumber(DRCPoolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const compoundingETH = new BigNumber(yieldEarned)\n    .plus(previousDayResult.ETHEarnings)\n    .toNumber()\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gasCost = 0\n\n  const totalGasCost = new BigNumber(previousDayResult.totalGasCost)\n    .plus(gasCost)\n    .toNumber()\n\n  const profit = new BigNumber(ETHEarnings).minus(totalGasCost).toNumber()\n\n  return {\n    day,\n    yieldEarned,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gasCost,\n    totalGasCost,\n    profit,\n  }\n}\n\nexport function calculateDRCFarmingStrategy(assumptions: EnhancedAssumptions) {\n  const results: DRCFarmingStrategyResult[] = []\n\n  for (let i = 0; i < assumptions.daysAmount; i++) {\n    const day = i + 1\n    const result =\n      day === 1\n        ? calculateFirstDayResult(assumptions)\n        : calculateResult(assumptions, results[i - 1])\n\n    results.push(result)\n  }\n\n  return results\n}\n","import { BigNumber } from 'bignumber.js'\n\nimport { EnhancedAssumptions, TraditionalFarmingStrategyResult } from './types'\n\nfunction determineClaimThisDay(day: number, rewardClaimIntervalDays: number) {\n  return rewardClaimIntervalDays > 0 && day % rewardClaimIntervalDays === 0\n}\n\nfunction calculateFirstDayResult(\n  assumptions: EnhancedAssumptions\n): TraditionalFarmingStrategyResult {\n  const {\n    initialPrincipal,\n    poolInterestPerDay,\n    rewardClaimIntervalDays,\n    compoundInterestPerDay,\n    gasTransactionCost,\n    depositTransactionAmount,\n    rewardClaimTransactionAmount,\n    swapAndStakeTransactionAmount,\n  } = assumptions\n\n  const day = 1\n\n  const yieldEarned = new BigNumber(poolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const claimThisDay = determineClaimThisDay(day, rewardClaimIntervalDays)\n\n  const compoundingETH = claimThisDay ? yieldEarned : 0\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gasCost = claimThisDay\n    ? new BigNumber(gasTransactionCost)\n        .times(\n          depositTransactionAmount +\n            rewardClaimTransactionAmount +\n            rewardClaimTransactionAmount +\n            swapAndStakeTransactionAmount\n        )\n        .toNumber()\n    : new BigNumber(gasTransactionCost)\n        .times(depositTransactionAmount + rewardClaimTransactionAmount)\n        .toNumber()\n\n  return {\n    day,\n    yieldEarned: yieldEarned,\n    totalYieldEarned: yieldEarned,\n    rewardsToClaim: yieldEarned,\n    claimThisDay,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gasCost,\n    totalGasCost: gasCost,\n    profit: (claimThisDay ? ETHEarnings : yieldEarned) - gasCost,\n  }\n}\n\nexport function calculateResult(\n  assumptions: EnhancedAssumptions,\n  previousDayResult: TraditionalFarmingStrategyResult\n): TraditionalFarmingStrategyResult {\n  const {\n    initialPrincipal,\n    poolInterestPerDay,\n    rewardClaimIntervalDays,\n    compoundInterestPerDay,\n    gasTransactionCost,\n    rewardClaimTransactionAmount,\n    swapAndStakeTransactionAmount,\n  } = assumptions\n\n  const day = previousDayResult.day + 1\n\n  const yieldEarned = new BigNumber(poolInterestPerDay)\n    .times(initialPrincipal)\n    .toNumber()\n\n  const totalYieldEarned = new BigNumber(previousDayResult.totalYieldEarned)\n    .plus(yieldEarned)\n    .toNumber()\n\n  const rewardsToClaim = previousDayResult.claimThisDay\n    ? yieldEarned\n    : new BigNumber(yieldEarned)\n        .plus(previousDayResult.rewardsToClaim)\n        .toNumber()\n\n  const claimThisDay = determineClaimThisDay(day, rewardClaimIntervalDays)\n\n  const compoundingETH = claimThisDay\n    ? new BigNumber(rewardsToClaim)\n        .plus(previousDayResult.ETHEarnings)\n        .toNumber()\n    : previousDayResult.ETHEarnings\n\n  const ETHInterestEarned = new BigNumber(compoundingETH)\n    .times(compoundInterestPerDay)\n    .toNumber()\n\n  const ETHEarnings = new BigNumber(compoundingETH)\n    .plus(ETHInterestEarned)\n    .toNumber()\n\n  const gasCost = claimThisDay\n    ? new BigNumber(gasTransactionCost)\n        .times(rewardClaimTransactionAmount + swapAndStakeTransactionAmount)\n        .toNumber()\n    : 0\n\n  const totalGasCost = gasCost + previousDayResult.totalGasCost\n\n  const earnings = claimThisDay\n    ? ETHEarnings\n    : new BigNumber(rewardsToClaim).plus(ETHEarnings).toNumber()\n\n  const profit = new BigNumber(earnings).minus(totalGasCost).toNumber()\n\n  return {\n    day,\n    yieldEarned,\n    totalYieldEarned,\n    rewardsToClaim,\n    claimThisDay,\n    compoundingETH,\n    ETHInterestEarned,\n    ETHEarnings,\n    gasCost,\n    totalGasCost,\n    profit,\n  }\n}\n\nexport function calculateTraditionalFarmingStrategy(\n  assumptions: EnhancedAssumptions\n) {\n  const results: TraditionalFarmingStrategyResult[] = []\n\n  for (let i = 0; i < assumptions.daysAmount; i++) {\n    const day = i + 1\n    const result =\n      day === 1\n        ? calculateFirstDayResult(assumptions)\n        : calculateResult(assumptions, results[i - 1])\n\n    results.push(result)\n  }\n\n  return results\n}\n","import { calculateDRCFarmingStrategy } from './calculate-drc-farming-strategy'\nimport { calculateTraditionalFarmingStrategy } from './calculate-traditional-farming-strategy'\nimport { EnhancedAssumptions, Result } from './types'\n\nexport default function calculateStrategies(\n  assumptions: EnhancedAssumptions\n): Result {\n  return {\n    traditional: calculateTraditionalFarmingStrategy(assumptions),\n    drc: calculateDRCFarmingStrategy(assumptions),\n  }\n}\n","import Highcharts from 'highcharts'\nimport { calculateProfitDifference } from '../../Utils/calculate-profit-difference'\nimport calculateStrategies from '../../Utils/calculate-strategies'\nimport { formatCurrency } from '../../Utils/formatters'\nimport { EnhancedAssumptions, Result } from '../../Utils/types'\nimport {\n  DAYS_AMOUNT,\n  MAX_COLOR,\n  MIN_COLOR,\n  REWARD_CLAIM_INTERVALS,\n} from './config'\n\nconst buildModifyAssumptions =\n  (assumptions: EnhancedAssumptions, daysAmount: number) =>\n  (rewardClaimIntervalDays: number): EnhancedAssumptions => ({\n    ...assumptions,\n    daysAmount,\n    rewardClaimIntervalDays,\n  })\n\nfunction calculateAttributes(day: number, strategyResults: Result) {\n  const dailyResultTraditional = strategyResults.traditional[day - 1]\n  const dailyResultDRC = strategyResults.drc[day - 1]\n  const profitDifference = calculateProfitDifference(\n    dailyResultTraditional,\n    dailyResultDRC\n  )\n\n  return {\n    color: profitDifference < 0 ? MIN_COLOR : MAX_COLOR,\n    value: profitDifference,\n    custom: {\n      profitDifference,\n      profitTraditional: dailyResultTraditional.profit,\n      profitDRC: dailyResultDRC.profit,\n    },\n  }\n}\n\nexport function createData(assumptions: EnhancedAssumptions) {\n  const data: Highcharts.PointOptionsObject[] = []\n\n  const daysAmount = DAYS_AMOUNT[DAYS_AMOUNT.length - 1].value\n  const modifyAssumptions = buildModifyAssumptions(assumptions, daysAmount)\n\n  REWARD_CLAIM_INTERVALS.forEach((rewardClaimIntervalConfig, y) => {\n    const modifiedAssumptions = modifyAssumptions(\n      rewardClaimIntervalConfig.value\n    )\n    const strategyResults = calculateStrategies(modifiedAssumptions)\n\n    DAYS_AMOUNT.forEach((daysAmountConfig, x) => {\n      data.push({\n        x,\n        y,\n        ...calculateAttributes(daysAmountConfig.value, strategyResults),\n      })\n    })\n  })\n\n  return data\n}\n\nexport function createSeries(\n  assumptions: EnhancedAssumptions\n): Highcharts.SeriesOptionsType[] {\n  return [\n    {\n      name: 'Profit Difference',\n      type: 'heatmap',\n      borderWidth: 1,\n      data: createData(assumptions),\n      dataLabels: {\n        formatter: function () {\n          const { value } = this.point\n          if (value == null) {\n            return\n          }\n          return formatCurrency(value)\n        },\n        enabled: true,\n        color: 'lightgrey',\n      },\n    },\n  ]\n}\n","import Highcharts from 'highcharts'\n\nimport { EnhancedAssumptions } from '../../Utils/types'\nimport { DAYS_AMOUNT, REWARD_CLAIM_INTERVALS } from './config'\nimport { createSeries } from './create-series'\nimport { formatTooltip, CustomPoint } from './format-tooltip'\n\nconst xAxisCategories = DAYS_AMOUNT.map(({ label }) => label)\nconst yAxisCategories = REWARD_CLAIM_INTERVALS.map(({ label }) => label)\n\nexport function createOptions(assumptions: EnhancedAssumptions) {\n  const options: Highcharts.Options = {\n    chart: {\n      type: 'heatmap',\n      plotBorderWidth: 1,\n    },\n    title: {\n      text: 'Profit Difference per Reward Claim Interval per Farming Duration',\n    },\n    xAxis: {\n      categories: xAxisCategories,\n      title: {\n        text: 'Farming Duration',\n      },\n    },\n    yAxis: {\n      categories: yAxisCategories,\n      title: {\n        text: 'Reward Claim Interval',\n      },\n    },\n    // colorAxis: {\n    //   minColor: 'darkred',\n    //   maxColor: 'darkgreen',\n    // },\n    // legend: {\n    //   align: 'right',\n    //   layout: 'vertical',\n    //   margin: 0,\n    //   verticalAlign: 'top',\n    //   y: 35,\n    //   symbolHeight: 280,\n    // },\n    legend: {\n      enabled: false,\n    },\n    tooltip: {\n      formatter: function () {\n        return formatTooltip(this.point as CustomPoint)\n      },\n    },\n    series: createSeries(assumptions),\n  }\n\n  return options\n}\n","import Highcharts from 'highcharts'\nimport { formatCurrency } from '../../Utils/formatters'\nimport { DAYS_AMOUNT, REWARD_CLAIM_INTERVALS } from './config'\n\nexport interface CustomPoint extends Highcharts.Point {\n  y: number\n  custom: {\n    profitTraditional: number\n    profitDRC: number\n    profitDifference: number\n  }\n}\n\nexport function formatTooltip(point: CustomPoint) {\n  const {\n    x,\n    y,\n    custom: { profitTraditional, profitDRC, profitDifference },\n  } = point\n\n  const daysAmountConfig = DAYS_AMOUNT[x]\n  const rewardClaimConfig = REWARD_CLAIM_INTERVALS[y]\n\n  return (\n    `<b>Profit difference</b>: ${formatCurrency(profitDifference)}` +\n    `<br/>Farming duration: ${daysAmountConfig.label}` +\n    `<br/><br/><b>Traditional Farming</b>` +\n    `<br/>Reward Claim Interval: ${rewardClaimConfig.label}` +\n    `<br/>Profit: ${formatCurrency(profitTraditional)}` +\n    `<br/><br/><b>Dracula Protocol</b>` +\n    `<br/>Profit: ${formatCurrency(profitDRC)}`\n  )\n}\n","import React, { memo } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport HighchartsHeatmap from 'highcharts/modules/heatmap'\n\nimport { EnhancedAssumptions } from '../../Utils/types'\nimport { createOptions } from './create-options'\n\nimport './index.less'\n\nwindow.Highcharts = Highcharts\nHighchartsHeatmap(Highcharts)\n\ninterface Props {\n  assumptions: EnhancedAssumptions\n}\n\nfunction Heatmap({ assumptions }: Props) {\n  const options = createOptions(assumptions)\n  return (\n    <div className=\"heatmap\">\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  )\n}\n\nexport default memo(Heatmap)\n","import React from 'react'\nimport { Tabs } from 'antd'\nimport LineChart from '../LineChart'\nimport { EnhancedAssumptions, Result } from '../../Utils/types'\nimport Heatmap from '../Heatmap'\n\nconst { TabPane } = Tabs\n\ninterface Props {\n  assumptions: EnhancedAssumptions\n  result: Result\n}\n\nexport default function Charts({ assumptions, result }: Props) {\n  return (\n    <Tabs defaultActiveKey=\"1\">\n      <TabPane tab=\"Line Chart\" key=\"1\">\n        <LineChart result={result} />\n      </TabPane>\n      <TabPane tab=\"Heatmap\" key=\"2\">\n        <Heatmap assumptions={assumptions} />\n      </TabPane>\n    </Tabs>\n  )\n}\n","import React from 'react'\nimport NumberFormat, { NumberFormatValues } from 'react-number-format'\nimport { Input } from 'antd'\nimport BigNumber from 'bignumber.js'\n\ninterface Props {\n  onChange?: (value: number | null) => void\n  value?: number | null | undefined\n  allowNegative?: boolean\n}\n\nexport default function InputPercentage({\n  onChange,\n  value,\n  allowNegative = true,\n  ...otherProps\n}: Props) {\n  const onValueChange = (event: NumberFormatValues) => {\n    if (!onChange) {\n      return\n    }\n    const { floatValue } = event\n    if (floatValue === undefined) {\n      onChange(null)\n      return\n    }\n    const decimal = new BigNumber(floatValue).dividedBy(100).toNumber()\n    onChange(decimal)\n  }\n\n  const percentageValue =\n    value != null ? new BigNumber(value).multipliedBy(100).toNumber() : ''\n\n  return (\n    <NumberFormat\n      {...otherProps}\n      value={percentageValue}\n      onValueChange={onValueChange}\n      suffix=\"%\"\n      customInput={Input}\n      allowNegative={allowNegative}\n    />\n  )\n}\n","import React from 'react'\nimport NumberFormat, { NumberFormatValues } from 'react-number-format'\nimport { Input } from 'antd'\n\nimport { DEFAULT_CURRENCY_SYMBOL } from '../../Constants'\n\ninterface Props {\n  onChange?: (value: number | null) => void\n  currencySymbol?: string\n  allowNegative?: boolean\n}\n\nexport default function InputCurrency({\n  onChange,\n  currencySymbol = DEFAULT_CURRENCY_SYMBOL,\n  allowNegative = true,\n  ...otherProps\n}: Props) {\n  const onValueChange = (event: NumberFormatValues) => {\n    if (!onChange) {\n      return\n    }\n    const { floatValue } = event\n    onChange(floatValue === undefined ? null : floatValue)\n  }\n\n  return (\n    <NumberFormat\n      {...otherProps}\n      onValueChange={onValueChange}\n      prefix={currencySymbol}\n      customInput={Input}\n      allowNegative={allowNegative}\n      thousandSeparator\n    />\n  )\n}\n","export const DEFAULT_CURRENCY_SYMBOL = '$'\n","import React, { useState } from 'react'\nimport { Form, InputNumber, Typography, Row, Tabs, Col, Button } from 'antd'\nimport Title from 'antd/lib/typography/Title'\nimport { InputAssumptions } from '../../Utils/types'\nimport InputPercentage from '../InputPercentage'\nimport InputCurrency from '../InputCurrency'\nimport Draccie from '../../Resources/draccie-drinking.png'\n\nconst { Item } = Form\nconst { Text } = Typography\nconst { TabPane } = Tabs\n\ninterface Props {\n  assumptions: InputAssumptions\n  onChangeAssumptions: (assumptions: InputAssumptions) => void\n}\n\nexport default function AssumptionsForm({\n  assumptions,\n  onChangeAssumptions,\n}: Props) {\n  const [touched, setTouched] = useState(false)\n\n  const onFinish = (formAssumptions: InputAssumptions) => {\n    setTouched(false)\n    // Because of the Tabs, not all items are registered: we have to spread the initial assumptions.\n    onChangeAssumptions({\n      ...assumptions,\n      ...formAssumptions,\n    })\n  }\n\n  return (\n    <Row align=\"bottom\" gutter={[12, 0]}>\n      <Col xs={24} sm={16}>\n        <Form\n          labelCol={{ span: 12 }}\n          wrapperCol={{ span: 12 }}\n          onFinish={onFinish}\n          onFieldsChange={() => setTouched(true)}\n          scrollToFirstError\n          initialValues={assumptions}\n        >\n          <Tabs defaultActiveKey=\"1\">\n            <TabPane tab=\"Basic\" key=\"1\">\n              <Row>\n                <Col\n                  xs={24}\n                  sm={{\n                    span: 12,\n                    offset: 12,\n                  }}\n                >\n                  <Title level={3}>Basic Assumptions</Title>\n                </Col>\n              </Row>\n              <Item\n                name=\"initialPrincipal\"\n                label={<Text strong>Initial Principal</Text>}\n                extra=\"The total value of LP tokens in USD.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Initial Principal is required!',\n                  },\n                ]}\n              >\n                <InputCurrency />\n              </Item>\n              <Item\n                name=\"poolAPY\"\n                label={<Text strong>Victim Pool APY</Text>}\n                extra=\"The annual percentage yield of the pool.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Victim Pool APY is required!',\n                  },\n                ]}\n              >\n                <InputPercentage />\n              </Item>\n              <Item\n                name=\"ETHStrategyAPY\"\n                label={<Text strong>Compound Strategy APY</Text>}\n                extra=\"The annual percentage yield of the reward compound strategy.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Compound Strategy APY is required!',\n                  },\n                ]}\n              >\n                <InputPercentage />\n              </Item>\n              <Item\n                name=\"rewardClaimIntervalDays\"\n                label={<Text strong>Reward Claim Interval</Text>}\n                extra=\"Amount of days between reward claims for traditional farming strategy. Set to zero (0) to never claim rewards.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Reward Claim Interval is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                name=\"gasTransactionCost\"\n                label={<Text strong>Gas Transaction Cost</Text>}\n                extra=\"Average cost of a single transaction in USD.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Gas Transaction Cost is required!',\n                  },\n                ]}\n              >\n                <InputCurrency />\n              </Item>\n              <Item\n                name=\"daysAmount\"\n                label={<Text strong>Amount of Days</Text>}\n                extra=\"The timeframe of the analysis in days.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Amount of Days is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} max={365 * 10} style={{ width: '100%' }} />\n              </Item>\n            </TabPane>\n            <TabPane tab=\"Advanced\" key=\"2\">\n              <Row>\n                <Col\n                  xs={24}\n                  sm={{\n                    span: 12,\n                    offset: 12,\n                  }}\n                >\n                  <Title level={3}>Advanced Assumptions</Title>\n                </Col>\n              </Row>\n              <Item\n                label={<Text strong>Deposit Transaction Amount</Text>}\n                required\n                name=\"depositTransactionAmount\"\n                extra=\"The amount of transactions for a deposit of tokens into victim pool or DRC. Considers the approval transaction.\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Deposit Transaction Amount is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                label={<Text strong>Reward Claim Transaction Amount</Text>}\n                name=\"rewardClaimTransactionAmount\"\n                extra=\" The amount of transactions for a claim of reward. For reward from victim pool or DRC (ETH/DRC).\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Reward Claim Transaction Amount is required!',\n                  },\n                ]}\n              >\n                <InputNumber min={0} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                label={<Text strong>Swap and Stake Transaction Amount</Text>}\n                name=\"swapAndStakeTransactionAmount\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Swap and Stake Transaction Amount is required!',\n                  },\n                ]}\n                extra=\"The amount of transactions for selling the victim token for ETH and deposit into compounding strategy.\"\n              >\n                <InputNumber min={1} style={{ width: '100%' }} />\n              </Item>\n              <Item\n                label={<Text strong>Dracula Protocol Fee</Text>}\n                name=\"DRCFee\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Dracula Protocol Fee is required!',\n                  },\n                ]}\n                extra=\"The protocol performance fee on the yield earned. This is fixed but could be adjusted with community vote.\"\n              >\n                <InputPercentage />\n              </Item>\n            </TabPane>\n          </Tabs>\n          <Item wrapperCol={{ xs: { span: 24 }, sm: { span: 12, offset: 12 } }}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={!touched}>\n              Submit\n            </Button>\n          </Item>\n        </Form>\n      </Col>\n      <Col xs={0} sm={8}>\n        <img\n          src={Draccie}\n          alt=\"Draccie drinking\"\n          style={{ marginBottom: -20, opacity: 0.5 }}\n        />\n      </Col>\n    </Row>\n  )\n}\n","import { Typography } from 'antd'\nimport React from 'react'\n\nimport './index.less'\n\nconst { Text } = Typography\n\nexport default function Footer() {\n  return (\n    <footer>\n      <Text type=\"warning\">\n        <span role=\"img\" aria-label=\"bat\">\n          🦇\n        </span>{' '}\n        This is a community contribution. Use at your own discretion!{' '}\n        <span role=\"img\" aria-label=\"bat\">\n          🦇\n        </span>\n      </Text>\n    </footer>\n  )\n}\n","import { Typography, Row, Col, Divider } from 'antd'\nimport React from 'react'\nimport Draccie from '../../Resources/draccie-grinning.png'\n\nconst { Title, Text } = Typography\n\nexport default function Considerations() {\n  return (\n    <Row align=\"middle\" gutter={[12, 0]}>\n      <Col xs={0} sm={8}>\n        <img\n          src={Draccie}\n          alt=\"Draccie grinning\"\n          style={{ marginBottom: -20, opacity: 0.5, float: 'right' }}\n        />\n      </Col>\n      <Col xs={24} sm={16}>\n        <Title level={3}>Considerations</Title>\n        <Text>\n          Please consider the below points when interpreting the results of this\n          calculator. We aim to compare traditional farming strategies with\n          Dracula Protocol strategies to give you an idea of the pros and cons.\n          However, real-world uncertainties make it impossible to calculate\n          exact profit values.\n        </Text>\n        <Divider />\n        <ul>\n          <li>\n            The <strong>initial principal</strong> remains equal for the\n            duration of the analysis. This is not true in reality for multiple\n            reasons:\n            <ol>\n              <li>\n                The price volatility of the underlying assets of the liquidity\n                pair.\n              </li>\n              <li>\n                The appreciation of the LP tokens because of transaction fees.\n              </li>\n            </ol>\n          </li>\n          <li>\n            The appreciation of the <strong>victim reward token</strong>{' '}\n            compared to Ether ($ETH). The calculator assumes that the victim\n            token appreciates equally in value. However, by not claiming rewards\n            you are exposed to the price volatility of the victim token: which\n            increases risk.\n          </li>\n          <li>\n            <strong>Gas transaction costs</strong> fluctuate. This\n            implementation assumes fixed gas price for the entire farming\n            duration.\n          </li>\n          <li>\n            With traditional farming in a single pool you will have a single,\n            fluctuating, APR. With Dracula Protocol you are exposed to the{' '}\n            <strong>weighted average APR of all the pools</strong>. You receive\n            rewards based on your part of the total value locked in the\n            platform.\n          </li>\n        </ul>\n      </Col>\n    </Row>\n  )\n}\n","import React, { useState } from 'react'\nimport { Collapse, Divider, Typography } from 'antd'\n\nimport * as defaultAssumptions from '../../Utils/default-assumptions'\nimport { enhanceAssumptions } from '../../Utils/enhance-assumptions'\nimport DataTable from '../../Components/DataTable'\nimport PageWindow from '../../Components/PageWindow'\nimport Header from '../../Components/Header'\nimport Charts from '../../Components/Charts'\nimport AssumptionsForm from '../../Components/AssumptionsForm'\nimport { InputAssumptions } from '../../Utils/types'\nimport calculateStrategies from '../../Utils/calculate-strategies'\nimport Footer from '../../Components/Footer'\nimport Considerations from '../../Components/Considerations'\n\nconst { Panel } = Collapse\nconst { Text } = Typography\n\nfunction App() {\n  const [assumptions, setAssumptions] = useState(\n    enhanceAssumptions(defaultAssumptions)\n  )\n\n  const onChangeAssumptions = (formAssumptions: InputAssumptions) => {\n    const enhancedAssumptions = enhanceAssumptions(formAssumptions)\n    setAssumptions(enhancedAssumptions)\n  }\n  const result = calculateStrategies(assumptions)\n\n  return (\n    <PageWindow>\n      <Header />\n\n      <Charts assumptions={assumptions} result={result} />\n\n      <Divider />\n\n      <Collapse defaultActiveKey={['1']}>\n        <Panel header={<Text strong>Assumptions</Text>} key=\"1\">\n          <AssumptionsForm\n            assumptions={assumptions}\n            onChangeAssumptions={onChangeAssumptions}\n          />\n        </Panel>\n        <Panel header={<Text strong>Data</Text>} key=\"2\">\n          <DataTable result={result} />\n        </Panel>\n        <Panel header={<Text strong>Considerations</Text>} key=\"3\">\n          <Considerations />\n        </Panel>\n      </Collapse>\n\n      <Footer />\n    </PageWindow>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'antd/dist/antd.less'\nimport 'antd/dist/antd.dark.less'\nimport './index.css'\n\nimport App from './Containers/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}